class Wall extends Template {
    constructor (x, y, w, h, color) {
        super(x, y, w, h, color)

    }
}
let walls = [];

let map = [
    ['-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'],
    ['-','0','0','0','0','0','0','0','0','0','0','-','0','-','0','0','0','0','0','0','-','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','-','0','0','0','0','0','0','-'],
    ['-','0','0','0','0','0','0','0','0','0','0','-','0','-','0','0','0','0','0','0','-','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','-','0','0','0','0','0','D','-'],
    ['-','0','0','0','0','0','0','0','0','0','0','-','0','-','0','0','0','0','0','0','-','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','-','0','0','0','0','0','D','-'],
    ['-','0','0','0','0','0','0','0','0','0','0','-','0','-','0','0','0','0','0','0','-','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','-','0','0','0','0','0','D','-'],
    ['-','0','0','0','0','0','0','0','0','0','0','-','0','-','0','0','0','0','0','0','-','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','-','0','0','0','0','0','0','-'],
    ['-','0','0','0','0','0','0','0','0','0','0','-','0','-','0','0','0','0','0','0','-','0','0','0','0','0','0','0','0','0','0','0','0','-','-','-','-','-','-','-','-','0','0','0','0','0','0','-'],
    ['-','0','0','0','0','0','0','0','0','0','0','-','0','-','0','0','0','0','0','0','-','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','-','0','0','0','0','0','0','-'],
    ['-','0','0','0','0','0','0','0','0','0','0','-','0','-','0','0','0','0','0','0','-','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','-','0','0','0','0','0','0','-'],
    ['-','0','0','0','0','0','0','0','0','0','0','-','0','-','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','-','0','0','0','0','0','0','-'],
    ['-','0','0','0','0','0','0','0','0','0','0','-','0','-','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','-','0','0','0','0','0','0','-'],
    ['-','0','0','0','0','0','0','0','0','0','0','-','0','-','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','-'],
    ['-','0','0','0','0','0','0','0','0','0','0','-','-','-','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','-'],
    ['-','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','-'],
    ['-','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','-'],
    ['-','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','-'],
    ['-','0','0','0','0','-','-','-','-','-','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','-'],
    ['-','0','0','0','0','-','0','0','0','-','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','-'],
    ['-','0','0','0','0','-','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','-'],
    ['-','0','0','0','0','-','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','-'],
    ['-','0','0','0','0','-','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','-'],
    ['-','0','0','0','0','-','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','-'],
    ['-','0','0','0','0','-','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','-'],
    ['-','0','0','0','0','-','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','-','-','-','-','-','-','0','0','0','0','-','-','-','-','-','-','-','-','-','-'],
    ['-','0','0','0','0','-','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','-','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','-'],
    ['-','0','0','0','0','-','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','-','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','-'],
    ['-','0','0','0','0','-','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','-','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','-'],
    ['-','0','0','0','0','-','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','-','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','-'],
    ['-','0','0','0','0','-','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','-','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','-'],
    ['-','0','0','0','0','-','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','-','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','-'],
    ['-','0','0','0','0','-','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','-','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','-'],
    ['-','0','0','0','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-'],

]

function drawMap(){
    map.forEach((row, index) => {
        row.forEach((cell, count) => {
            switch (cell) {
                case '-':
                    walls.push(
                        new Wall(25 * count, 25 * index, 25, 25, 'black')
                    )
                    break;
                case 'D':
                    walls.push(
                        new Wall(25 * count, 25 * index, 25, 25, 'blue')
                    )
                    break;


                default:
                    break;
            }
        })
    })

    walls.forEach(wall => {
        wall.draw();

})

}


